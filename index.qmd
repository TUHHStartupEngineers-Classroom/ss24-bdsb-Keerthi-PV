---
title: "My Lab Journal"
subtitle: "Business Data Science Basics"
author: "Puthen Veetil Keerthi"
---

![](assets/logo/logo.png){width=80% fig-align="center"}

This is my lab journaling.

This is an `.Rmd` file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a \# in front of your text, it will create a top level-header.

# My first post


Chapter : Intro to tidyverse challenge solution
After clearly following each instruction in the document of this chapter the solution to the challenge is 
# SALES ANALYSIS ----
install.packages("writexl")
# 1.0 Load libraries ----
library(tidyverse)
library(readxl)
library(lubridate)
library(ggplot2)
library(writexl)
# 2.0 Importing Files ----
bikes <- read_excel("00_data/bikes.xlsx")
orderLines <- read_excel("00_data/orderlines.xlsx")
bikeshops <- read_excel("00_data/bikeshops.xlsx")
# 3.0 Examining Data ----


# 4.0 Joining Data ----
bikeshop_orderlines_joined_tbl <- orderLines %>%
  left_join(bikes,by=c("product.id"="bike.id")) %>%
  left_join(bikeshops, by=c("customer.id"="bikeshop.id"))

# 5.0 Wrangling Data ----
bikeshop_orderlines_wrangled <- bikeshop_orderlines_joined_tbl %>% 
  separate(col = location, into = c("City","State"), sep = ",") %>%
  mutate(total.price = price * quantity) %>%
  select(-...1, -gender) %>%
  select(-ends_with(".id")) %>%
  bind_cols(bikeshop_orderlines_joined_tbl %>% select(order.id)) %>%
  select(order.id, contains("order"), contains("model"), State,
         price, quantity, total.price,
         everything()) %>%
  rename(bikeshop = name) %>%
  set_names(names(.) %>% str_replace_all("\\.", "_"))


# 6.0 Business Insights ----
# 6.1 Sales by Year ----

salesByState_summarized_data= bikeshop_orderlines_wrangled %>%
  select(State,total_price) %>%
  group_by(State)%>% summarise(sales=sum(total_price)) %>% mutate(sales_text = 
                                                                 scales::dollar
                                                               (sales, big.mark
                                                                 = ".",
                                                                 decimal.mark = 
                                                                   ",",
                                                                 prefix = "", 
                                                                 suffix = " €"))

salesByState_summarized_data%>%
  ggplot(aes(x = State, y = sales)) +
  geom_col(fill = "#2DC6D6") +
  geom_label(aes(label = sales_text),label.size = 0.01)+
  geom_smooth(method = "lm", se = FALSE) + 
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(title    = "Revenue by State", x = "",
       y = "Revenue") +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))


# Step 1 - Manipulate
sales_year_state <-  bikeshop_orderlines_wrangled %>% 
  select(order_date,State,total_price) %>% mutate(yr=year(order_date)) %>% 
  group_by(yr,State) %>% summarise(sales= sum(total_price)) %>% mutate(
    sales_text = scales::dollar(sales, big.mark= ".",decimal.mark = ",",
                                prefix = "", suffix = " €"))


# Step 2 - Visualize
sales_year_state %>%
  
  # Set up x, y, fill
  ggplot(aes(x = yr, y = sales, fill = State)) +
  
  # Geometries
  geom_col() + # Run up to here to get a stacked bar plot
  
  # Facet
  facet_wrap(~ State) +
  
  # Formatting
  scale_y_continuous(labels = scales::dollar_format(big.mark = ".", 
                                                    decimal.mark = ",", 
                                                    prefix = "", 
                                                    suffix = " €")) +
  labs(
    title = "Revenue by year and State",
    fill = "Main category" # Changes the legend name
  ) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 7))

bikeshop_orderlines_wrangled %>% write_xlsx("00_data/bike_orderlines.xlsx")
bikeshop_orderlines_wrangled %>% write_csv("00_data/bike_orderlines.csv")
bikeshop_orderlines_wrangled %>% write_rds("00_data/bike_orderlines.rds")

Chapter : Data Acquisition

The code for the challenge in the chapter Data Acquisition is as follows

library(rvest)
library(stringi)
library(xopen)
library(jsonlite)
library(tidyverse)
library(glue)

url <- "https://www.radon-bikes.de"
xopen(url)
html_home <- read_html(url)
#Get url fpr eacf of the product categories
bike_category_url_tbl <- html_home %>% html_nodes(".megamenu__item") %>% html_elements("a") %>% 
  html_attr('href') %>% enframe(name = 'position',value = 'title') %>% mutate(
    category_url=glue("https://www.radon-bikes.de{title}")
  ) %>% filter(position<9)#remove accessories and gears using filter



#Get the Model Names
get_bike_data <- function(link){
  model_infor <- read_html(link) %>% html_nodes(".o-slick-slider__slide-content") %>% html_element("h2") %>% 
    html_text() %>% enframe(name = "position",value = 'Model Name')
  #Get the sizes
  bike_sizes <- read_html(link) %>% html_nodes(".o-slick-slider__slide-content") %>% html_node('.m-bikegrid__size') %>% 
    html_text() %>% str_extract("[0-9].+") %>% enframe(name = "position",value = "size")
  #Get the prices
  bike_prices <- read_html(link) %>% html_nodes(".m-serienpanel__price--active") %>% html_text() %>% 
    str_remove("^ .$") %>%  stri_remove_empty() %>%  enframe(name='position',value = 'price')
  #combine three using position
   model_infor %>% left_join(bike_sizes) %>% left_join(bike_prices) %>%
    filter(position!=23)
}

category_1 <-  bike_category_url_tbl$category_url[2] # Get the URl for 1st category
bike_model  <- get_bike_data(link = category_1)

bike_category_url_vector <- bike_category_url_tbl %>% pull(category_url) #Creates a vector with all the urls
bike_data_lst <- map(bike_category_url_vector,get_bike_data) # repeats the function for each of the urls
bike_data_tbl <- bind_rows(bike_data_lst) %>% rowid_to_column(var = "ID") #generates tibble with all the data


