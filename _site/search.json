[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is my lab journaling.\nThis is an .Rmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\n\nMy first post\nChapter : Intro to tidyverse challenge solution After clearly following each instruction in the document of this chapter the solution to the challenge is # SALES ANALYSIS —- install.packages(“writexl”) # 1.0 Load libraries —- library(tidyverse) library(readxl) library(lubridate) library(ggplot2) library(writexl) # 2.0 Importing Files —- bikes &lt;- read_excel(“00_data/bikes.xlsx”) orderLines &lt;- read_excel(“00_data/orderlines.xlsx”) bikeshops &lt;- read_excel(“00_data/bikeshops.xlsx”) # 3.0 Examining Data —-\n\n\n4.0 Joining Data —-\nbikeshop_orderlines_joined_tbl &lt;- orderLines %&gt;% left_join(bikes,by=c(“product.id”=“bike.id”)) %&gt;% left_join(bikeshops, by=c(“customer.id”=“bikeshop.id”))\n\n\n5.0 Wrangling Data —-\nbikeshop_orderlines_wrangled &lt;- bikeshop_orderlines_joined_tbl %&gt;% separate(col = location, into = c(“City”,“State”), sep = “,”) %&gt;% mutate(total.price = price * quantity) %&gt;% select(-…1, -gender) %&gt;% select(-ends_with(“.id”)) %&gt;% bind_cols(bikeshop_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% select(order.id, contains(“order”), contains(“model”), State, price, quantity, total.price, everything()) %&gt;% rename(bikeshop = name) %&gt;% set_names(names(.) %&gt;% str_replace_all(“\\.”, “_“))\n\n\n6.0 Business Insights —-\n\n\n6.1 Sales by Year —-\nsalesByState_summarized_data= bikeshop_orderlines_wrangled %&gt;% select(State,total_price) %&gt;% group_by(State)%&gt;% summarise(sales=sum(total_price)) %&gt;% mutate(sales_text = scales::dollar (sales, big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“))\nsalesByState_summarized_data%&gt;% ggplot(aes(x = State, y = sales)) + geom_col(fill = “#2DC6D6”) + geom_label(aes(label = sales_text),label.size = 0.01)+ geom_smooth(method = “lm”, se = FALSE) + scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + labs(title =”Revenue by State”, x = ““, y =”Revenue”) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\nStep 1 - Manipulate\nsales_year_state &lt;- bikeshop_orderlines_wrangled %&gt;% select(order_date,State,total_price) %&gt;% mutate(yr=year(order_date)) %&gt;% group_by(yr,State) %&gt;% summarise(sales= sum(total_price)) %&gt;% mutate( sales_text = scales::dollar(sales, big.mark= “.”,decimal.mark = “,”, prefix = ““, suffix =” €“))\n\n\nStep 2 - Visualize\nsales_year_state %&gt;%\n# Set up x, y, fill ggplot(aes(x = yr, y = sales, fill = State)) +\n# Geometries geom_col() + # Run up to here to get a stacked bar plot\n# Facet facet_wrap(~ State) +\n# Formatting scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + labs( title =”Revenue by year and State”, fill = “Main category” # Changes the legend name ) + theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 7))\nbikeshop_orderlines_wrangled %&gt;% write_xlsx(“00_data/bike_orderlines.xlsx”) bikeshop_orderlines_wrangled %&gt;% write_csv(“00_data/bike_orderlines.csv”) bikeshop_orderlines_wrangled %&gt;% write_rds(“00_data/bike_orderlines.rds”)\nChapter : Data Acquisition\nThe code for the challenge in the chapter Data Acquisition is as follows\nlibrary(rvest) library(stringi) library(xopen) library(jsonlite) library(tidyverse) library(glue)\nurl &lt;- “https://www.radon-bikes.de” xopen(url) html_home &lt;- read_html(url) #Get url fpr eacf of the product categories bike_category_url_tbl &lt;- html_home %&gt;% html_nodes(“.megamenu__item”) %&gt;% html_elements(“a”) %&gt;% html_attr(‘href’) %&gt;% enframe(name = ‘position’,value = ‘title’) %&gt;% mutate( category_url=glue(“https://www.radon-bikes.de{title}”) ) %&gt;% filter(position&lt;9)#remove accessories and gears using filter\n#Get the Model Names get_bike_data &lt;- function(link){ model_infor &lt;- read_html(link) %&gt;% html_nodes(“.o-slick-slider__slide-content”) %&gt;% html_element(“h2”) %&gt;% html_text() %&gt;% enframe(name = “position”,value = ‘Model Name’) #Get the sizes bike_sizes &lt;- read_html(link) %&gt;% html_nodes(“.o-slick-slider__slide-content”) %&gt;% html_node(’.m-bikegrid__size’) %&gt;% html_text() %&gt;% str_extract(“[0-9].+”) %&gt;% enframe(name = “position”,value = “size”) #Get the prices bike_prices &lt;- read_html(link) %&gt;% html_nodes(“.m-serienpanel__price–active”) %&gt;% html_text() %&gt;% str_remove(“^ .$”) %&gt;% stri_remove_empty() %&gt;% enframe(name=‘position’,value = ‘price’) #combine three using position model_infor %&gt;% left_join(bike_sizes) %&gt;% left_join(bike_prices) %&gt;% filter(position!=23) }\ncategory_1 &lt;- bike_category_url_tbl$category_url[2] # Get the URl for 1st category bike_model &lt;- get_bike_data(link = category_1)\nbike_category_url_vector &lt;- bike_category_url_tbl %&gt;% pull(category_url) #Creates a vector with all the urls bike_data_lst &lt;- map(bike_category_url_vector,get_bike_data) # repeats the function for each of the urls bike_data_tbl &lt;- bind_rows(bike_data_lst) %&gt;% rowid_to_column(var = “ID”) #generates tibble with all the data\nChapter : Data Wrangling\nThe code for the challenge of the chapter Data Wrangling (the reduced data set is been used) is as follows:\n#load the tables\nlibrary(tidyverse) library(vroom) library(lubridate) library(data.table)\n\n\nload the column list\ncol_types_patent &lt;- list( id = col_character(), date = col_date(“%Y-%m-%d”), num_claims = col_double() )\ncol_types_patent_asignee &lt;- list( patent_id = col_character(), assignee_id = col_character() )\ncol_types_asignee &lt;- list( id = col_character(), type = col_double(), organization = col_character() )\ncol_types_uspc &lt;- list( patent_id = col_character(), mainclass_id = col_character(), sequence = col_double() )\n#Acquire data from the files patent_tbl &lt;- vroom( file = “Patent_data_reduced/patent.tsv”, delim = “, col_types = col_types_patent, na = c(”“,”NA”, “NULL”) )\npatent_asignee_tbl &lt;- vroom( file = “Patent_data_reduced/patent_assignee.tsv”, delim = “, col_types = col_types_patent_asignee, na = c(”“,”NA”, “NULL”) )\nasignee_tbl &lt;- vroom( file = “Patent_data_reduced/assignee.tsv”, delim = “, col_types = col_types_asignee, na = c(”“,”NA”, “NULL”) )\nuspc_tbl &lt;- vroom( file = “Patent_data_reduced/uspc.tsv”, delim = “, col_types = col_types_uspc, na = c(”“,”NA”, “NULL”) )\n#Convert the acquired data to data table setDT(patent_tbl) setDT(patent_asignee_tbl) setDT(asignee_tbl) setDT(uspc_tbl)\n#merge asignee data combined_asignee_data &lt;- merge(x = patent_asignee_tbl, y = asignee_tbl, by.x = “assignee_id”, by.y = “id”, all.x = TRUE, all.y = FALSE)\n#Top 10 US Orgs with most patents #type 2 is for US Companies combined_asignee_data[type == 2, .N, by = organization][order( N, decreasing = TRUE)] %&gt;% slice(1:10)\n#combine patent data with assignee_tbl data and patent_asignee_tbl combined_patent_data &lt;- merge(x = patent_tbl, y = combined_asignee_data, by.x = “id”, by.y = “patent_id”, all.x = TRUE, all.y = FALSE) %&gt;% filter(!is.na(assignee_id))\nsetnames(combined_patent_data, “date”, “GrantDate”)\n#top 10 US companies with most new patents in August 2014 #US Orgs with most patents in Aug 2014 MostPatentsAugust14 &lt;- combined_patent_data[month(GrantDate) == 8 & type == 2, .N, by = organization][order( N, decreasing = TRUE)] %&gt;% head(1)\nT10_Latest_patents &lt;- combined_patent_data[month(GrantDate) == 8 & type == 2, .N, by = .(GrantDate, organization)][order(GrantDate, N, decreasing = TRUE)] %&gt;% slice(1:10)\n#combine uspc_tbl with asignee_tbl and patent_asignee_tbl uspc_combined &lt;- merge(x = uspc_tbl, y = combined_asignee_data, by = “patent_id”, all.x = TRUE, all.y = FALSE) %&gt;% filter(!is.na(assignee_id))\n#most innovative tech category is the class with most patents most_innovative &lt;- uspc_combined[,.N, by = mainclass_id][order(N, decreasing = TRUE)] %&gt;% head(1)\n#top 10 orgs with the most patents top10Worldwide &lt;- uspc_combined[type == 3 | type == 2, .N, by = .(organization)][order(N, decreasing = TRUE)] %&gt;% slice(1:10)\n#vector of the top 10 orgs top10orgs &lt;- top10Worldwide %&gt;% pull(organization)\n#the classes of the top 10 orgs uspc_combined[organization %in% top10orgs, .N, by = mainclass_id][order(N, decreasing = TRUE)] %&gt;% slice(1:5)\nChapter : Data Visualization\nThe code for challenges one and two for the chapter Data Visualization is as follows\nlibrary(tidyverse) library(lubridate) library(glue) install.packages(“ggrepel”) library(ggrepel) covid_data_tbl &lt;- read_csv(“https://covid.ourworldindata.org/data/owid-covid-data.csv”) countries &lt;- c(“Germany”,“United Kingdom”,“France”,“Spain”,“United States”,“Europe”)\n#wrangling cumulative_cases_tbl &lt;- covid_data_tbl %&gt;% select(location,date,total_cases) %&gt;% filter(location %in% countries) %&gt;% filter(!is.na(total_cases)) #%&gt;% # as_factor(location) %&gt;% fct_reorder(total_cases) #%&gt;% #mutate(new_date=floor_date(date(date),unit = “months”)) %&gt;% # group_by(location) %&gt;% # summarise(cum_cases=sum(new_cases)) %&gt;% # mutate(month_year=glue(‘{format(new_date,“%B %Y”)}’)) #ungroup() #visualization cumulative_cases_tbl\\(label &lt;- NA cumulative_cases_tbl\\)label[which((cumulative_cases_tbl\\(date ==  max(cumulative_cases_tbl\\)date)))] &lt;- cumulative_cases_tbl\\(total_cases[which(cumulative_cases_tbl\\)date== max(cumulative_cases_tbl$date))] cumulative_cases_tbl %&gt;% ggplot(aes(date,total_cases,color=location)) + geom_line(size =1)+ scale_y_continuous(labels = scales::label_number(scale=1e-6, suffix=“M”))+ geom_label_repel(aes(label = label))+ scale_color_discrete(type = c(“#E69F00”, “#56B4E9”, “#009E73”, “#F0E442”, “#0072B2”, “#D55E00”, “#CC79A7”))\n\n\nCase 2\n#Lat and Longitude Data for world world &lt;- map_data(“world”)\n#Calculate moratality rate mortality_rate_tbl &lt;- covid_data_tbl %&gt;% select(location, date,new_deaths,population) %&gt;%filter(!is.na(new_deaths)) %&gt;% filter(date&lt;=as.Date(“2021-04-16”)) %&gt;% mutate(mort_rate=new_deaths/population) %&gt;% group_by(location) %&gt;% summarise(mortality_rate=sum(mort_rate)) %&gt;% arrange(desc(mortality_rate))%&gt;% mutate(location = case_when(\nlocation == \"United Kingdom\" ~ \"UK\",\nlocation == \"United States\" ~ \"USA\",\nlocation == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\nTRUE ~ location\n)) mapped_data &lt;- world %&gt;% left_join(mortality_rate_tbl,by=c(“region”=“location”)) mapped_data %&gt;% ggplot(aes(long,lat, mortality_rate))+ geom_map(aes(map_id=region, fill = mortality_rate ),map = mapped_data) + scale_fill_continuous(low=“red”, high=“black”, labels = scales::label_number(scale = 1e2, prefix = ““, suffix =”%“))"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "challenge_Intro to tidyverse.html",
    "href": "challenge_Intro to tidyverse.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is my lab journaling.\nThis is an .Rmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\n\nMy first post\nChapter : Intro to tidyverse challenge solution After clearly following each instruction in the document of this chapter the solution to the challenge is # SALES ANALYSIS —- install.packages(“writexl”) # 1.0 Load libraries —- library(tidyverse) library(readxl) library(lubridate) library(ggplot2) library(writexl) # 2.0 Importing Files —- bikes &lt;- read_excel(“00_data/bikes.xlsx”) orderLines &lt;- read_excel(“00_data/orderlines.xlsx”) bikeshops &lt;- read_excel(“00_data/bikeshops.xlsx”) # 3.0 Examining Data —-\n\n\n4.0 Joining Data —-\nbikeshop_orderlines_joined_tbl &lt;- orderLines %&gt;% left_join(bikes,by=c(“product.id”=“bike.id”)) %&gt;% left_join(bikeshops, by=c(“customer.id”=“bikeshop.id”))\n\n\n5.0 Wrangling Data —-\nbikeshop_orderlines_wrangled &lt;- bikeshop_orderlines_joined_tbl %&gt;% separate(col = location, into = c(“City”,“State”), sep = “,”) %&gt;% mutate(total.price = price * quantity) %&gt;% select(-…1, -gender) %&gt;% select(-ends_with(“.id”)) %&gt;% bind_cols(bikeshop_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% select(order.id, contains(“order”), contains(“model”), State, price, quantity, total.price, everything()) %&gt;% rename(bikeshop = name) %&gt;% set_names(names(.) %&gt;% str_replace_all(“\\.”, “_“))\n\n\n6.0 Business Insights —-\n\n\n6.1 Sales by Year —-\nsalesByState_summarized_data= bikeshop_orderlines_wrangled %&gt;% select(State,total_price) %&gt;% group_by(State)%&gt;% summarise(sales=sum(total_price)) %&gt;% mutate(sales_text = scales::dollar (sales, big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“))\nsalesByState_summarized_data%&gt;% ggplot(aes(x = State, y = sales)) + geom_col(fill = “#2DC6D6”) + geom_label(aes(label = sales_text),label.size = 0.01)+ geom_smooth(method = “lm”, se = FALSE) + scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + labs(title =”Revenue by State”, x = ““, y =”Revenue”) + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\nStep 1 - Manipulate\nsales_year_state &lt;- bikeshop_orderlines_wrangled %&gt;% select(order_date,State,total_price) %&gt;% mutate(yr=year(order_date)) %&gt;% group_by(yr,State) %&gt;% summarise(sales= sum(total_price)) %&gt;% mutate( sales_text = scales::dollar(sales, big.mark= “.”,decimal.mark = “,”, prefix = ““, suffix =” €“))\n\n\nStep 2 - Visualize\nsales_year_state %&gt;%\n# Set up x, y, fill ggplot(aes(x = yr, y = sales, fill = State)) +\n# Geometries geom_col() + # Run up to here to get a stacked bar plot\n# Facet facet_wrap(~ State) +\n# Formatting scale_y_continuous(labels = scales::dollar_format(big.mark = “.”, decimal.mark = “,”, prefix = ““, suffix =” €“)) + labs( title =”Revenue by year and State”, fill = “Main category” # Changes the legend name ) + theme(axis.text.x = element_text(angle = 45, hjust = 1,size = 7))\nbikeshop_orderlines_wrangled %&gt;% write_xlsx(“00_data/bike_orderlines.xlsx”) bikeshop_orderlines_wrangled %&gt;% write_csv(“00_data/bike_orderlines.csv”) bikeshop_orderlines_wrangled %&gt;% write_rds(“00_data/bike_orderlines.rds”)\nChapter : Data Acquisition\nThe code for the challenge in the chapter Data Acquisition is as follows\nlibrary(rvest) library(stringi) library(xopen) library(jsonlite) library(tidyverse) library(glue)\nurl &lt;- “https://www.radon-bikes.de” xopen(url) html_home &lt;- read_html(url) #Get url fpr eacf of the product categories bike_category_url_tbl &lt;- html_home %&gt;% html_nodes(“.megamenu__item”) %&gt;% html_elements(“a”) %&gt;% html_attr(‘href’) %&gt;% enframe(name = ‘position’,value = ‘title’) %&gt;% mutate( category_url=glue(“https://www.radon-bikes.de{title}”) ) %&gt;% filter(position&lt;9)#remove accessories and gears using filter\n#Get the Model Names get_bike_data &lt;- function(link){ model_infor &lt;- read_html(link) %&gt;% html_nodes(“.o-slick-slider__slide-content”) %&gt;% html_element(“h2”) %&gt;% html_text() %&gt;% enframe(name = “position”,value = ‘Model Name’) #Get the sizes bike_sizes &lt;- read_html(link) %&gt;% html_nodes(“.o-slick-slider__slide-content”) %&gt;% html_node(’.m-bikegrid__size’) %&gt;% html_text() %&gt;% str_extract(“[0-9].+”) %&gt;% enframe(name = “position”,value = “size”) #Get the prices bike_prices &lt;- read_html(link) %&gt;% html_nodes(“.m-serienpanel__price–active”) %&gt;% html_text() %&gt;% str_remove(“^ .$”) %&gt;% stri_remove_empty() %&gt;% enframe(name=‘position’,value = ‘price’) #combine three using position model_infor %&gt;% left_join(bike_sizes) %&gt;% left_join(bike_prices) %&gt;% filter(position!=23) }\ncategory_1 &lt;- bike_category_url_tbl$category_url[2] # Get the URl for 1st category bike_model &lt;- get_bike_data(link = category_1)\nbike_category_url_vector &lt;- bike_category_url_tbl %&gt;% pull(category_url) #Creates a vector with all the urls bike_data_lst &lt;- map(bike_category_url_vector,get_bike_data) # repeats the function for each of the urls bike_data_tbl &lt;- bind_rows(bike_data_lst) %&gt;% rowid_to_column(var = “ID”) #generates tibble with all the data"
  }
]